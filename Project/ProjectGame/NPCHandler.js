import {NPC} from './NPC.js';
import {GLTFLoader} from '../libs/GLTFLoader.js';
import {DRACOLoader} from '../libs/DRACOLoader.js';
import {Skeleton, Raycaster, Group, Vector3, Mesh, CapsuleGeometry, MeshBasicMaterial, SphereGeometry} from '../libs/three.module.js';

const WAYPOINTS = [
	new Vector3(-59.89253460336165, 4.801882704642674, -64.02237971170358),
	new Vector3(-59.89253460336165, 4.801882704642674, -64.02237971170358),
	new Vector3(48.23330137765365, 2.5053315403517527, -45.91246836694988),
	new Vector3(6.117558460257719, 0.13086750604633665, -16.74297454263569),
	new Vector3(2.5212040794956607, 4.312172060219335, 37.67442985246025),
	new Vector3(-43.506370164704535, 4.704693220507739, 10.533826885014435),
	new Vector3(51.4278128024145, 0.1355361954812651, 50.63703831154808),
	new Vector3(18.372744888597296, 0.13086730040838518, -15.212461781497977),
	new Vector3(8.661079461473328, 13.636080965519941, -28.464553121437188),
	new Vector3(-61.81534402200036, 9.65949306492824, -13.94053832576816),
	new Vector3(3.575100732479285, 0.2563118367104495, -35.016197418993144),
	new Vector3(-34.378689830358056, 1.8921418148253164, -13.403055759162648),
	new Vector3(-51.27598176879085, 3.5143178667575667, -35.70949571723854),
	new Vector3(-35.13104491962679, 4.190827017997041, -63.40798848583523),
	new Vector3(11.347939164304947, 2.4109784536542826, -52.54998889528859),
	new Vector3(49.164897311485845, 0.13086793593078233, -19.942498877833426),
	new Vector3(51.57958784094832, 0.8401133035378878, 27.4739309298027),
	new Vector3(55.13679936180549, 3.8769585794500268, -44.40850803201009),
	new Vector3(3.3569230342370844, 1.401889569207419, -44.67929575468611),
	new Vector3(8.050719131061285, 13.635358383203588, -28.79795698139178),
	new Vector3(12.390839371148928, 2.8433693114820984, -34.93055888921321),
	new Vector3(-51.95888003053196, 6.570052980766414, 11.068154087873175),
	new Vector3(-32.794571941866636, 9.42079940951937, 24.9705370843624),
	new Vector3(2.283084252837284, 3.616244393556871, 35.34266333271265),
	new Vector3(38.954030272388366, 0.1308698899499155, -34.485783313269145),
	new Vector3(59.8546004179273, 0.3780444403472801, -11.055390303062318),
	new Vector3(50.608040253949966, 13.633052632248308, -2.5003984161066284),
	new Vector3(47.81066473172028, 7.142790614374344, -0.9355144683349486),
	new Vector3(-24.176678726073057, 5.464519444990267, -72.28863364157893),
	new Vector3(-39.880220139373904, 6.9419600844311, -69.22490145727352),
	new Vector3(36.58056092998389, 0.1308690437047637, -28.187388514714726),
	new Vector3(15.84946749795877, 0.2314883147381087, -39.1579290712567),
	new Vector3(2.5515892056027383, 3.413110321645666, -58.317843591628815),
	new Vector3(-9.725381705244615, 2.3623786305482053, -43.90047410324211),
	new Vector3(-1.8624906079881924, 0.18544211890055667, -30.60260827807791),
	new Vector3(8.769527306092684, 0.13086781717841742, -19.058654301033123),
	new Vector3(9.001461673960264, 0.13086674180171876,  -11.054889575841454),
	new Vector3(-5.277690777866109, 0.13086730110781492, -15.217667518115267),
	new Vector3(-11.166552710715397, 0.20192861314546565, -20.41101694326584),
	new Vector3(-20.587057160846676, 0.7326615232464733,  -19.198872175944256),
	new Vector3(-33.22985213436654, 1.6796212267599142, -13.75062154109765),
	new Vector3(-23.299949066059, 0.14113447730567924, -2.725686398001611),
	new Vector3(-14.271007572116215, 0.14446104718050842, 2.6130895891368984),
	new Vector3(-3.570914062141476, 0.13991858867178872, 13.96270137397032),
	new Vector3(9.953809716738363, 0.13086358513042134, 12.43943950641958),
	new Vector3(18.61416022812582, 0.14443298890573542, 27.577300584968746),
	new Vector3(-11.236114891532562, 3.9391292034486267, 31.994830944745928),
	new Vector3(-20.745269736035468, 1.6338739357645722, 13.673323287307461),
	new Vector3(-41.89403821908706, 0.1308602102526506, 37.55782571776922),
	new Vector3(-46.15959696472524, 4.131291234706793, 8.553723193627755),
	new Vector3(-50.10346091090042, 8.893663043534591, 15.698852805889159),
	new Vector3(-16.954209412254222, 4.823103483834472, 30.84666455165056),
	new Vector3(4.8199932053944465, 2.4110946492707837, 32.85086270885695),
	new Vector3(-25.25677046736997, 0.13086146914411753, 28.18820580838576),
	new Vector3(-25.38279024402729, 1.3700764278599504, 9.857039836750603),
	new Vector3(-23.173567197952085, 0.16518435497288336, 1.241626755150742),
	new Vector3(-54.82979885838532, 4.256724422849043, -36.01925027985003),
	new Vector3(-59.34648976447927, 6.736521332182305, -45.31499793291786),
	new Vector3(-57.62811636110588, 5.522209757339011, -49.48883245955642),
	new Vector3(-37.025130970486785, 3.744826458277883, -59.64373299883026),
	new Vector3(-25.267764891247726, 3.939363666498731, -65.02346255299261),
	new Vector3(-19.164785423243906, 5.942752320676903, -60.270657008055856),
	new Vector3(-2.712858759644284, 3.4509115831090704, -57.14018073208358),
	new Vector3(6.303706896627361, 2.0423238838588538, -48.53797672279837),
	new Vector3(20.05117634320561, 1.6884340844277228, -47.35548531495295),
	new Vector3(41.14923772603365, 0.1308693908360406, -30.77100134161341),
	new Vector3(46.879976951280995, 1.8638081064639163, -45.21260360676214),
	new Vector3(55.5314714633669, 4.544421524169962, -46.382060502329445),
	new Vector3(53.732496249154735, 5.5114909398706375, -51.94839826607903),
	new Vector3(38.77918963704225, 0.323365432978337, -43.97220136570935),
	new Vector3(-3.751103427805681, 3.6820985753851243, -58.57629640356595),
	new Vector3(-3.7668349590342984, 6.292380050456676, -66.76419876768506),
	new Vector3(14.62400524312298, 2.3391410038123763, -51.778655729549634),
	new Vector3(33.149811525084644, 0.5188378292361966, -41.17997057801341),
	new Vector3(-2.7507848332146736, 2.0883589522240444, -46.38851849977761),
	new Vector3(-3.940500593849791, 0.20490324052985232, -28.176656367107),
	new Vector3(7.678928337122578, 13.632529053977896, -27.689695990037006),
	new Vector3(25.805169136055635, 2.8773147360686, -6.6747421388594805),
	new Vector3(42.34986129725447, 0.13086749700426822, -16.67567659558013),
	new Vector3(32.42224155513745, 0.13086797253538807, -20.214937967066064),
	new Vector3(24.081220992849524, 0.13086782279505574, -19.100457454698166),
	new Vector3(17.88593030363848, 0.130867026446085, -13.173427675622156),
	new Vector3(17.740162893364417, 0.13086624754066678, -7.376225973169744),
	new Vector3(9.805215550245817, 0.13086545615131462, -1.486109416753129),
	new Vector3(5.474557273966217, 0.13086498922570572, 1.989103197615012),
	new Vector3(12.509554198786084, 8.36117919831006, 1.8573738206218289),
	new Vector3(13.171224024639901, 10.469776096323692, 6.334488595700982),
	new Vector3(14.988212663265589, 13.630868600599246, 5.941205355686861),
	new Vector3(19.73769827095998, 3.5481846606957577, 4.633342215646186),
	new Vector3(25.233148008019516, 0.13086342934553774, 13.598908181979402),
	new Vector3(41.05443122448437, 0.13334954994490875, 34.52232088930019),
	new Vector3(46.770373622691366, 0.2851460429665406,  22.036586168269658),
	new Vector3(39.4940892560089, 0.2623080169622163, 38.04096605737678),
	new Vector3(35.58213897474619, 0.1497630359769027, 29.152652501524628),
	new Vector3(46.56250750746558, 0.42484347041008297, 62.2446640241884),
	new Vector3(45.30076538084367, 0.1308578929191744, 54.80516961911875),
	new Vector3(50.62531062717018, 0.13085824586743683,  52.178262344969816),
	new Vector3(49.93150407255208, 0.13687087763328395, 47.729536546799125),
	new Vector3(41.16925239965354, 0.13086105235844894, 31.290239215873378),
	new Vector3(39.32972705420849, 0.13086232708426987, 21.802767940594148),
	new Vector3(44.830128104153346, 0.130863219151798, 15.163328503409703),
	new Vector3(55.586850424220074, 1.932860868845965, 21.960907458820998),
	new Vector3(60.72213624839263, 6.920215850862903, 29.2863018381624),
	new Vector3(36.75750418435167, 0.13086380981079915, 10.767198643425868),
	new Vector3(42.89497213009979, 0.13086514531123083, 0.8273969741973863),
	new Vector3(39.74470418034315, 0.13086634397659702, 8.093974913958323),
	new Vector3(40.71527569411957, 0.13086691591863, -12.350799030272245)
];

const NPC_NUMBER = 14;

class NPCHandler{
    constructor( game ){
        this.game = game;
        this.waypoints = WAYPOINTS;
        this.load();
	}

    load(){
        const loader = new GLTFLoader( ).setPath(`${this.game.assetsPath}models/`);
		const dracoLoader = new DRACOLoader();
        dracoLoader.setDecoderPath( '..libs/draco/' );
        loader.setDRACOLoader( dracoLoader );
		
		// Load a GLTF resource
		loader.load(
			// resource URL
			`bad_guy.glb`,
			// called when the resource is loaded
			gltf => {
				if (this.game.pathfinder){
					this.initNPCs(gltf);
				}else{
					this.gltf = gltf;
				}
			},
			// called while loading is progressing
			xhr => {
			},
			// called when loading has errors
			err => {
				console.error( err );
			}
		);
	}
    
	initNPCs(gltf = this.gltf){
		const gltfs = [gltf];

		this.npcs = [];

		for(let i = 0; i < NPC_NUMBER; i++) gltfs.push(this.cloneGLTF(gltf));

		let i = 1;
		gltfs.forEach(gltf => {
			const object = gltf.scene;

			object.traverse(child=> {
				if(child.name.includes("Rifle"))
					object.rifle = child;
				if(child.isMesh){
					child.castShadow = true;
					child.frustumCulled = false;
					if(child.name.includes("R_Bullet")){
						child.visible = false;
						object.bullet = child;
					}
				}
			});

			const material = new MeshBasicMaterial( { color: 0x55AAFF } );
			material.visible = false;
			const headGeometry = new SphereGeometry( 0.15, 32, 16 );
			const head = new Mesh( headGeometry, material );
			const head2 = new Mesh( headGeometry, material );
			head.name = "head";
			head2.name = "head_2";
			const bodyGeometry = new CapsuleGeometry( 0.3, 1.1, 4, 8 );
			const body = new Mesh( bodyGeometry, material );
			body.name = "body";
			const hitbox = new Group();
			object.add(hitbox);
			hitbox.add(head);
			hitbox.add(head2);
			hitbox.add(body);
			head.position.y += 1.6;
			head.position.z += 0.2;
			head.position.x -= 0.08;
			head2.position.y += 1.6;
			head2.position.z += 0.05;
			head2.position.x -= 0.08;
			body.position.y += 0.8;

			const options = {
				object,
				speed: 5,
				animations: gltf.animations,
				game: this.game,
				showPath: true,
				zone: 'map',
				id: i,
				waypoints: this.waypoints,
				hitbox: hitbox,
			};

			const npc = new NPC(options);
			npc.action = 'firing';

			npc.object.position.copy(this.game.randomSpawnpoint);
			npc.newPath(this.randomWaypoint);
			//npc.object.position.set(0,0,0);

			this.npcs.push(npc);
			i++;

		});

		this.npcs.forEach(npc => this.game.players.push(npc));
		this.game.startRendering();
	}

	cloneGLTF(gltf){
	
		const clone = {
			animations: gltf.animations,
			scene: gltf.scene.clone(true)
		  };
		
		const skinnedMeshes = {};
		
		gltf.scene.traverse(node => {
			if (node.isSkinnedMesh) {
			  skinnedMeshes[node.name] = node;
			}
		});
		
		const cloneBones = {};
		const cloneSkinnedMeshes = {};
		
		clone.scene.traverse(node => {
			if (node.isBone) {
			  cloneBones[node.name] = node;
			}
			if (node.isSkinnedMesh) {
			  cloneSkinnedMeshes[node.name] = node;
			}
		});
		
		for (let name in skinnedMeshes) {
			const skinnedMesh = skinnedMeshes[name];
			const skeleton = skinnedMesh.skeleton;
			const cloneSkinnedMesh = cloneSkinnedMeshes[name];
			const orderedCloneBones = [];
			for (let i = 0; i < skeleton.bones.length; ++i) {
				const cloneBone = cloneBones[skeleton.bones[i].name];
				orderedCloneBones.push(cloneBone);
			}
			cloneSkinnedMesh.bind(
				new Skeleton(orderedCloneBones, skeleton.boneInverses),
				cloneSkinnedMesh.matrixWorld);
		}
		
		return clone;

	}

    update(dt){
        if (this.npcs) 
			this.npcs.forEach( npc => npc.update(dt) );
    }

	get randomWaypoint(){
		const index = Math.floor(Math.random()*WAYPOINTS.length);
		return WAYPOINTS[index];
	}
}

export { NPCHandler };